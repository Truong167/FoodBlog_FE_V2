name: Semantic Release with PR

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Quan trọng để semantic-release có đầy đủ lịch sử git

      - name: Setup Node & bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.4 # Đảm bảo phiên bản bun bạn muốn dùng

      - name: Install dependencies
        run: bun install

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release and capture output
        id: semantic
        # Chạy semantic-release. Nó sẽ thất bại ở bước push của @semantic-release/git.
        # 'continue-on-error: true' sẽ đảm bảo workflow không dừng lại,
        # và chúng ta sẽ parse output từ stdout để lấy thông tin release.
        continue-on-error: true # Cho phép bước này không làm workflow dừng lại khi gặp lỗi
        run: |
          OUTPUT=$(bunx semantic-release --debug 2>&1 || true) # Chạy và chuyển stderr sang stdout, '|| true' để command không fail shell
          echo "$OUTPUT"

          # Phân tích output để lấy new_release_published và release_notes
          NEW_RELEASE_PUBLISHED=$(echo "$OUTPUT" | grep "\[semantic-release\] › ℹ  Published release" | wc -l | xargs)
          RELEASE_NOTES=$(echo "$OUTPUT" | grep -A 100 "Release notes:" | tail -n +2 | sed '/^\[semantic-release\]/d' | sed '/^$/d' | tr -d '\r' || echo "No release notes found.")

          # Nếu có bản release mới, NEW_RELEASE_PUBLISHED sẽ là 1, ngược lại là 0
          # Đặt output cho step này
          if [ "$NEW_RELEASE_PUBLISHED" -gt 0 ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "release_notes=No release published." >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # Đảm bảo biến này được truyền vào

      - name: Debug Semantic Release Output
        run: |
          echo "new_release_published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "release_notes:"
          echo "${{ steps.semantic.outputs.release_notes }}"

      - name: Create Pull Request for Release
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }} # Token có quyền tạo PR
          commit-message: "chore(release): prepare for new release" # Tiêu đề commit cho PR
          title: "chore(release): New Release Candidate for ${{ github.ref_name }}" # Tiêu đề của PR
          body: |
            This Pull Request contains the automated release changes from `semantic-release`.

            **Release Notes:**
            ${{ steps.semantic.outputs.release_notes }}
          branch: "release/candidate-${{ github.ref_name }}" # Nhánh tạm thời sẽ tạo ra
          base: ${{ github.ref_name }} # Nhánh đích mà PR sẽ merge vào
          labels: "release, automated-pr" # Gán nhãn cho PR
          # reviewers: your_github_username # (Tùy chọn) Thêm người đánh giá nếu cần
