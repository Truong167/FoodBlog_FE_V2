name: Semantic Release PR

on:
  push:
    branches:
      - dev # Hoặc nhánh bạn muốn chạy release PR

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    if: github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node & Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.4

      - name: Install dependencies
        run: bun install

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure Git for Actions
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git user configured for automated actions."

      - name: Run semantic-release and capture outputs
        id: semantic_release_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- START: semantic-release execution ---"
          # Chạy semantic-release. Redirect CẢ stdout và stderr vào một file duy nhất.
          # Sau đó, chúng ta sẽ parse file này để tìm JSON output.
          set -o pipefail # Đảm bảo nếu npx semantic-release thất bại, lệnh sẽ trả về lỗi.
          npx semantic-release --debug 2>&1 | tee semantic_release_raw_output.txt || {
            echo "semantic-release command failed with exit code $?."
            exit 1
          }
          echo "--- END: semantic-release execution ---"

          echo "--- START: Content of semantic_release_raw_output.txt (full logs) ---"
          cat semantic_release_raw_output.txt || echo "semantic_release_raw_output.txt not found or empty."
          echo "--- END: Content of semantic_release_raw_output.txt ---"

          # Bây giờ, chúng ta sẽ tìm JSON object trong file log tổng hợp.
          # semantic-release in ra JSON object nextRelease ở cuối output khi thành công.
          # Chúng ta tìm dòng cuối cùng bắt đầu bằng '{' và kết thúc bằng '}' và là JSON hợp lệ.
          RELEASE_OUTPUT=$(cat semantic_release_raw_output.txt | grep -E '^\s*\{.*\}\s*$' | tail -n 1)

          echo "--- DEBUG: Value of RELEASE_OUTPUT variable after initial grep/tail ---"
          echo "${RELEASE_OUTPUT}"

          # Xác thực rằng RELEASE_OUTPUT là JSON hợp lệ
          if [ -n "$RELEASE_OUTPUT" ] && echo "$RELEASE_OUTPUT" | jq -e '.' > /dev/null; then
            echo "DEBUG: RELEASE_OUTPUT is valid JSON. Extracting nextRelease."
            # Trích xuất chỉ phần nextRelease.
            # Đôi khi semantic-release in ra JSON của toàn bộ object release, không chỉ nextRelease.
            # Cần đảm bảo rằng chỉ lấy phần nextRelease.
            # Nếu JSON trực tiếp là nextRelease, không cần .nextRelease
            # Nếu JSON là { "nextRelease": {...}, "lastRelease": {...} }, thì cần .nextRelease
            
            # Kiểm tra xem có chứa .nextRelease không
            if echo "$RELEASE_OUTPUT" | jq -e '.nextRelease' > /dev/null; then
                RELEASE_OUTPUT=$(echo "$RELEASE_OUTPUT" | jq -c '.nextRelease') # Trích xuất nextRelease object
                echo "DEBUG: Extracted nextRelease object: $RELEASE_OUTPUT"
            else
                echo "DEBUG: RELEASE_OUTPUT is a JSON object but does not contain .nextRelease. Using as is."
                # Giữ nguyên RELEASE_OUTPUT nếu nó đã là nextRelease object
            fi

            echo "release_output_json<<EOF" >> "$GITHUB_OUTPUT"
            echo "$RELEASE_OUTPUT" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            echo "Found semantic-release JSON output and set it to step output."
          else
            echo "DEBUG: No valid semantic-release JSON output found or parsing failed. Setting empty JSON."
            echo "RELEASE_OUTPUT content was: ${RELEASE_OUTPUT}" # Log content for debug
            echo "release_output_json={}" >> "$GITHUB_OUTPUT"
          fi

          echo "--- Content of CHANGELOG.md after semantic-release ---"
          cat CHANGELOG.md || echo "CHANGELOG.md not found or empty."
          echo "--- Content of package.json after semantic-release ---"
          cat package.json || echo "package.json not found or empty."

      - name: Upload semantic-release raw output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semantic-release-raw-output
          path: semantic_release_raw_output.txt

      - name: Upload semantic-release JSON output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semantic-release-json-output
          path: semantic_release_json_output.json

      - name: Parse semantic-release output for new version and release notes
        id: get_release_info
        run: |
          NEW_VERSION=""
          RELEASE_NOTES=""

          RELEASE_JSON_CONTENT="${{ steps.semantic_release_run.outputs.release_output_json }}"
          echo "DEBUG: RELEASE_JSON_CONTENT from step output: $RELEASE_JSON_CONTENT"

          if [ -n "$RELEASE_JSON_CONTENT" ] && [ "$RELEASE_JSON_CONTENT" != "{}" ]; then
            echo "DEBUG: Attempting to parse JSON for nextRelease.version and notes."
            # Sử dụng jq để parse JSON từ biến
            PARSED_VERSION=$(echo "$RELEASE_JSON_CONTENT" | jq -r '.nextRelease.version // empty')
            PARSED_NOTES=$(echo "$RELEASE_JSON_CONTENT" | jq -r '.nextRelease.notes // empty')

            if [ -n "$PARSED_VERSION" ]; then
              NEW_VERSION="$PARSED_VERSION"
              echo "DEBUG: Successfully parsed NEW_VERSION: $NEW_VERSION"
            else
              echo "DEBUG: nextRelease.version not found in JSON or is empty."
            fi

            if [ -n "$PARSED_NOTES" ]; then
              RELEASE_NOTES="$PARSED_NOTES"
              echo "DEBUG: Successfully parsed RELEASE_NOTES (first 50 chars): ${RELEASE_NOTES:0:50}..."
            else
              echo "DEBUG: nextRelease.notes not found in JSON or is empty."
            fi
          else
            echo "DEBUG: RELEASE_JSON_CONTENT is empty or is a blank JSON object."
          fi

          if [ -z "$NEW_VERSION" ]; then
            echo "No new version determined by semantic-release. Skipping PR creation."
            echo "new_version=none" >> "$GITHUB_OUTPUT"
          else
            echo "New version determined: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            mkdir -p ./.github/release-assets
            echo "$RELEASE_NOTES" > ./.github/release-assets/release_notes.md
            echo "release_notes_file=./.github/release-assets/release_notes.md" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip if no version bump
        if: steps.get_release_info.outputs.new_version == 'none'
        run: |
          echo "No version bump detected by semantic-release. Workflow will stop here."
          exit 0

      - name: Read Release Notes for PR Body
        id: read_release_notes
        run: |
          RELEASE_NOTES_FILE="${{ steps.get_release_info.outputs.release_notes_file }}"
          echo "DEBUG: Reading release notes from $RELEASE_NOTES_FILE"
          if [ -f "$RELEASE_NOTES_FILE" ]; then
            RELEASE_NOTES_CONTENT=$(cat "$RELEASE_NOTES_FILE")
            echo "DEBUG: Release notes content (first 50 chars): ${RELEASE_NOTES_CONTENT:0:50}..."
            echo "release_notes_pr_body<<EOF" >> "$GITHUB_OUTPUT"
            echo "$RELEASE_NOTES_CONTENT" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "DEBUG: No release notes file found at $RELEASE_NOTES_FILE."
            echo "release_notes_pr_body=No detailed release notes available." >> "$GITHUB_OUTPUT"
          fi

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.get_release_info.outputs.new_version }}"
          echo "DEBUG: Attempting to update package.json with version: $NEW_VERSION"
          if [ "$NEW_VERSION" == "none" ]; then
            echo "Error: Cannot update package.json with 'none' version. Something went wrong upstream."
            exit 1
          fi
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          echo "package.json updated."
          echo "--- Content of package.json after update ---"
          cat package.json

      - name: Create Release Branch
        id: create_branch
        run: |
          NEW_VERSION="${{ steps.get_release_info.outputs.new_version }}"
          BRANCH_NAME="release/v$NEW_VERSION"
          echo "DEBUG: Creating new branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Commit version and changelog changes to new branch
        run: |
          NEW_VERSION="${{ steps.get_release_info.outputs.new_version }}"
          echo "DEBUG: Adding CHANGELOG.md and package.json to commit."
          git add CHANGELOG.md package.json
          if ! git diff --cached --exit-code; then
            echo "DEBUG: Changes detected, committing."
            git commit -m "chore(release): prepare for v$NEW_VERSION release PR [skip ci]"
            echo "Committed version and changelog changes to branch."
          else
            echo "DEBUG: No changes in CHANGELOG.md or package.json to commit."
          fi

      - name: Push Release Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.branch_name }}"
          echo "DEBUG: Pushing branch: $BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          echo "Pushed branch: $BRANCH_NAME to remote."

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): prepare for v${{ steps.get_release_info.outputs.new_version }} release PR"
          title: "Release v${{ steps.get_release_info.outputs.new_version }}"
          body: |
            ## Release v${{ steps.get_release_info.outputs.new_version }}

            This Pull Request includes the following automated updates for the upcoming release:

            - **Version Bump**: Updated `package.json` to `v${{ steps.get_release_info.outputs.new_version }}`.
            - **Changelog Update**: Added a new entry to `CHANGELOG.md` with release notes generated from recent commits.

            ---
            ### Release Notes:
            ${{ steps.read_release_notes.outputs.release_notes_pr_body }}

            ---
            Please review these changes, especially the changelog content, before merging this PR. Merging this PR will finalize the version update and integrate the changelog into the `main` branch.
          branch: ${{ steps.create_branch.outputs.branch_name }}
          base: dev
          labels: |
            release
            automated
          draft: false

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_release_info.outputs.new_version }}
          release_name: Release v${{ steps.get_release_info.outputs.new_version }}
          body: |
            ${{ steps.read_release_notes.outputs.release_notes_pr_body }}

            Please refer to the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v${{ steps.get_release_info.outputs.new_version }}/CHANGELOG.md) for full details on this release.
          draft: false
          prerelease: contains(github.ref, 'dev')
