name: Test and Build

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - labeled
      - synchronize

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    if: contains(github.event.pull_request.labels.*.name, 'ready for review') || github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: oven-sh/setup-bun@v1
        name: Install bun
        id: bun-install
        with:
          bun-version: 1.1.4

      - name: Cache dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            **/node_modules
            ~/.bun/install/cache
            .bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install

      - name: Get changed files
        id: changed_files
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff -z --name-only origin/${{ github.base_ref }}...HEAD -- '*.ts' '*.tsx' '*.js' '*.jsx')
          printf "%s\n" "$CHANGED_FILES" | tr '\0' '\n'
          echo "CHANGED_FILES=$CHANGED_FILES" >> "$GITHUB_OUTPUT"

      - name: Find and run tests
        run: |
          CHANGED_FILES="${{ steps.CHANGED_FILES.outputs.CHANGED_FILES }}"
          IFS=$'\n'
          echo "Changed files: $CHANGED_FILES"
          for file in $CHANGED_FILES; do
            # Escape các ký tự đặc biệt trong đường dẫn file
            escaped_file=$(printf '%s\n' "$file" | sed 's/[][()_ ]/\\&/g')
            echo "Processing file: $file (escaped: $escaped_file)\n"
            if [[ "$file" == *.spec.* ]]; then
              echo "Running test for spec file: $file (escaped: $escaped_file)"
              npm test "$escaped_file" # Sử dụng đường dẫn đã escape
            elif [[ "$file" == *.ts || "$file" == *.tsx ]]; then
              base_name=$(basename "$file" .ts)
              base_name="${base_name%.tsx}"
              file_dir=$(dirname "$file")
              echo "Base name: $base_name, File directory: $file_dir"
              possible_test_files=(
                "$file_dir/${base_name}.spec.ts"
                "$file_dir/${base_name}.test.ts"
                "$file_dir/${base_name}.spec.tsx" # Thêm trường hợp cho test của .tsx
                "$file_dir/${base_name}.test.tsx" # Thêm trường hợp cho test của .tsx
                "$file_dir/__tests__/${base_name}.spec.ts"
                "$file_dir/__tests__/${base_name}.test.ts"
                "$file_dir/__tests__/${base_name}.spec.tsx" # Thêm trường hợp cho test của .tsx
                "$file_dir/__tests__/${base_name}.test.tsx" # Thêm trường hợp cho test của .tsx
                "$(dirname "$file_dir")/__tests__/${base_name}.spec.ts"
                "$(dirname "$file_dir")/__tests__/${base_name}.test.ts"
                "$(dirname "$file_dir")/__tests__/${base_name}.spec.tsx" # Thêm trường hợp cho test của .tsx
                "$(dirname "$file_dir")/__tests__/${base_name}.test.tsx" # Thêm trường hợp cho test của .tsx
              )
              found_test_file=""
              escaped_test_file=""
              for test_path in "${possible_test_files[@]}"; do
                echo "Checking for test file: $test_path"
                if [ -f "$test_path" ]; then
                  found_test_file="$test_path"
                  # Escape các ký tự đặc biệt trong đường dẫn file test
                  escaped_test_file=$(printf '%s\n' "$test_path" | sed 's/[][()_ ]/\\&/g')
                  break
                fi
              done

              if [[ -n "$found_test_file" ]]; then
                echo "Running test for $file (found test file: $found_test_file, escaped: $escaped_test_file)"
                npm test "$escaped_test_file" # Sử dụng đường dẫn đã escape
              else
                echo "Skipping test for $file (no related test file found)"
              fi
            fi
          done
