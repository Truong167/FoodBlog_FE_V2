// .releaserc.js - Gi·∫£i ph√°p ƒë·ªÉ ƒë·∫£m b·∫£o getReleaseNotes ƒë∆∞·ª£c d√πng v√† CHANGELOG.md v·∫´n ƒë∆∞·ª£c c·∫≠p nh·∫≠t

const parserOpts = {
  headerPattern:
    /^(feat|fix|build|chore|ci|docs|perf|refactor|revert|style|test)\/([\w-]+):\s(.+)$/,
  headerCorrespondence: ["type", "scope", "subject"],
  noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE"],
  issuePrefixes: ["#"],
};

// H√†m getReleaseNotes c·ªßa b·∫°n - V·∫´n gi·ªØ nguy√™n ƒë·ªÉ n√≥ t·∫°o n·ªôi dung t√πy ch·ªânh
const getReleaseNotes = async (
  { nextRelease: { version, gitTag } },
  context
) => {
  // --- Gi·ªØ c√°c d√≤ng DEBUG n√†y ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ ƒë∆∞·ª£c g·ªçi l·∫ßn sau ---
  console.error("--- DEBUG: getReleaseNotes STARTED ---");
  console.error("Context object:", JSON.stringify(context, null, 2));
  console.error("nextRelease.version:", version);
  console.error("nextRelease.gitTag:", gitTag);

  const [owner, repo] = (
    process.env.GITHUB_REPOSITORY || // ∆Øu ti√™n bi·∫øn m√¥i tr∆∞·ªùng
    context.repository ||
    "Truong167/FoodBlog_FE_V2"
  ).split("/");
  console.error("Determined Owner:", owner, "Repo:", repo);

  const changelogUrl = `https://github.com/${owner}/${repo}/blob/${gitTag}/CHANGELOG.md`;
  console.error("Generated CHANGELOG URL:", changelogUrl);

  let releaseBody = `Please refer to the [CHANGELOG.md](${changelogUrl}) for full details on this release.`;

  if (gitTag.includes("-beta") || gitTag.includes("-dev")) {
    releaseBody =
      `### üß™ Prerelease v${version}\n\n` +
      releaseBody +
      "\n\n**This is a pre-release version and may contain bugs.**";
  } else {
    releaseBody = `### ‚ú® Release v${version}\n\n` + releaseBody;
  }
  console.error("Final Release Body (from getReleaseNotes):", releaseBody);
  console.error("--- DEBUG: getReleaseNotes ENDED ---");

  return releaseBody;
};

module.exports = {
  debug: true, // GI·ªÆ ƒê·ªÇ TI·∫æP T·ª§C DEBUG
  branches: [
    "main",
    {
      name: "feat/dev",
      prerelease: "dev",
    },
  ],
  plugins: [
    [
      "@semantic-release/commit-analyzer",
      {
        parserOpts,
        releaseRules: [
          { type: "feat", scope: "*", release: "minor" },
          { type: "feat", release: "minor" },
          { type: "fix", scope: "*", release: "patch" },
          { type: "fix", release: "patch" },
          { type: "perf", release: "patch" },
          { type: "refactor", release: "patch" },
          { type: "docs", release: "patch" },
          { type: "revert", release: "patch" },
          { type: "build", release: "patch" },
          { type: "ci", release: "patch" },
          { breaking: true, release: "major" },
        ],
      },
    ],
    // --- KH√îI PH·ª§C @semantic-release/release-notes-generator nh∆∞ng V√î HI·ªÜU H√ìA output c·ªßa n√≥ ---
    [
      "@semantic-release/release-notes-generator",
      {
        parserOpts,
        // *** ƒê√ÇY L√Ä ƒêI·ªÇM QUAN TR·ªåNG: writerOpts n√†y s·∫Ω khi·∫øn n√≥ kh√¥ng t·∫°o n·ªôi dung
        // cho release notes, bu·ªôc @semantic-release/github ph·∫£i d√πng releaseNotes t√πy ch·ªânh ***
        writerOpts: {
          // B·ªè qua t·∫•t c·∫£ commit ƒë·ªÉ kh√¥ng t·∫°o n·ªôi dung cho release notes
          transform: (commit, context) => {
            return; // ƒê∆°n gi·∫£n l√† kh√¥ng tr·∫£ v·ªÅ g√¨, khi·∫øn commit b·ªã b·ªè qua
          },
          // Ho·∫∑c b·∫°n c√≥ th·ªÉ ƒë·ªÉ c√°c t√πy ch·ªçn nh√≥m v√† s·∫Øp x·∫øp m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
        },
      },
    ],
    [
      "@semantic-release/changelog",
      {
        changelogFile: "CHANGELOG.md",
        // Quan tr·ªçng: ƒê·ªÉ CHANGELOG.md ƒë∆∞·ª£c c·∫≠p nh·∫≠t, b·∫°n c√≥ th·ªÉ c·∫ßn th√™m m·ªôt preset ·ªü ƒë√¢y
        // v√¨ writerOpts ·ªü tr√™n ƒë√£ lo·∫°i b·ªè t·∫•t c·∫£ c√°c commit.
        // V√≠ d·ª•: preset: 'conventionalcommits',
        // N·∫øu kh√¥ng c√≥ preset, changelog c√≥ th·ªÉ ch·ªâ l√† m·ªôt file r·ªóng ho·∫∑c kh√¥ng c·∫≠p nh·∫≠t.
        // N·∫øu b·∫°n mu·ªën CHANGELOG.md c√≥ n·ªôi dung ƒë·∫ßy ƒë·ªß (kh√¥ng ph·∫£i ch·ªâ link),
        // b·∫°n c·∫ßn kh√¥i ph·ª•c writerOpts ƒë·∫ßy ƒë·ªß cho release-notes-generator.
        // NH∆ØNG n·∫øu m·ª•c ti√™u l√† CH·ªà GitHub Release Body t√πy ch·ªânh, v√† CHANGELOG.md ch·ªâ ƒë·ªÉ ƒë√≥,
        // th√¨ c·∫•u h√¨nh hi·ªán t·∫°i c√≥ th·ªÉ ·ªïn.
      },
    ],

    [
      "@semantic-release/git",
      {
        assets: ["CHANGELOG.md", "package.json"],
        // Lo·∫°i b·ªè ${nextRelease.notes} v√¨ n√≥ s·∫Ω tr·ªëng r·ªóng.
        message: "chore(release): ${nextRelease.version} [skip ci]",
      },
    ],
    [
      "@semantic-release/github",
      {
        releaseNotes: getReleaseNotes, // H√†m t√πy ch·ªânh c·ªßa b·∫°n
      },
    ],
  ],
};
