// .releaserc.js

const parserOpts = {
  // ƒê·∫£m b·∫£o regex n√†y kh·ªõp v·ªõi ƒë·ªãnh d·∫°ng c·ªßa b·∫°n m·ªôt c√°ch ch√≠nh x√°c
  headerPattern:
    /^(feat|fix|build|chore|ci|docs|perf|refactor|revert|style|test)\/([\w-]+):\s(.+)$/,
  headerCorrespondence: ["type", "scope", "subject"],
  noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE"],
  issuePrefixes: ["#"],
};

// ====================================================================
// H√†m getReleaseNotes t√πy ch·ªânh c·ªßa b·∫°n
// B√¢y gi·ªù n√≥ nh·∫≠n c·∫£ 'context' ƒë·ªÉ l·∫•y owner/repo m·ªôt c√°ch ƒë√°ng tin c·∫≠y
// ====================================================================
const getReleaseNotes = async (
  { nextRelease: { version, gitTag } },
  context
) => {
  // L·∫•y owner v√† repo t·ª´ context ho·∫∑c t·ª´ bi·∫øn m√¥i tr∆∞·ªùng GITHUB_REPOSITORY
  // GITHUB_REPOSITORY c√≥ ƒë·ªãnh d·∫°ng "owner/repo"
  const [owner, repo] = (
    context.repository ||
    process.env.GITHUB_REPOSITORY ||
    "Truong167/FoodBlog_FE_V2"
  ).split("/");

  const changelogUrl = `https://github.com/${owner}/${repo}/blob/${gitTag}/CHANGELOG.md`;

  let releaseBody = `Please refer to the [CHANGELOG.md](${changelogUrl}) for full details on this release.`;

  if (gitTag.includes("-beta") || gitTag.includes("-dev")) {
    releaseBody =
      `### üß™ Prerelease v${version}\n\n` +
      releaseBody +
      "\n\n**This is a pre-release version and may contain bugs.**";
  } else {
    releaseBody = `### ‚ú® Release v${version}\n\n` + releaseBody;
  }

  return releaseBody;
};

// ====================================================================
// C·∫•u h√¨nh ch√≠nh c·ªßa semantic-release
// ƒê·∫£m b·∫£o c·∫•u h√¨nh branches bao g·ªìm c·∫£ main v√† feat/dev (n·∫øu b·∫°n mu·ªën prerelease)
// ====================================================================
module.exports = {
  branches: [
    "main", // Nh√°nh ch√≠nh cho c√°c release production
    {
      name: "feat/dev", // T√™n nh√°nh Git c·ªßa b·∫°n cho m√¥i tr∆∞·ªùng dev/staging
      prerelease: "dev", // T√™n k√™nh prerelease h·ª£p l·ªá theo SemVer (v√≠ d·ª•: v1.0.0-dev.1)
    },
  ],
  plugins: [
    [
      "@semantic-release/commit-analyzer",
      {
        parserOpts,
        releaseRules: [
          { type: "feat", scope: "*", release: "minor" },
          { type: "feat", release: "minor" },
          { type: "fix", scope: "*", release: "patch" },
          { type: "fix", release: "patch" },
          { type: "perf", release: "patch" },
          { type: "refactor", release: "patch" },
          { type: "docs", release: "patch" },
          { type: "revert", release: "patch" },
          { type: "build", release: "patch" },
          { type: "ci", release: "patch" },
          { breaking: true, release: "major" },
        ],
      },
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        parserOpts,
      },
    ],
    [
      "@semantic-release/changelog",
      {
        changelogFile: "CHANGELOG.md",
      },
    ],
    [
      "@semantic-release/npm",
      {
        npmPublish: false, // Gi·ªØ false n·∫øu b·∫°n kh√¥ng publish package l√™n npm registry
      },
    ],
    [
      "@semantic-release/git",
      {
        assets: ["CHANGELOG.md", "package.json"],
        message:
          "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}",
      },
    ],
    [
      "@semantic-release/github",
      {
        releaseNotes: getReleaseNotes, // G·∫Øn h√†m t√πy ch·ªânh v√†o ƒë√¢y
      },
    ],
  ],
};
