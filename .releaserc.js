const parserOpts = {
  // headerPattern:
  //   /^(feat|fix|build|chore|ci|docs|perf|refactor|revert|style|test)\/([\w-]+):\s(.+)$/,
  // headerCorrespondence: ["type", "scope", "subject"],
  // noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE"],
  // issuePrefixes: ["#"],

  headerPattern:
    /^Merge pull request #(\d+) from (.+)\/(feat|fix|chore|docs|style|refactor|perf|test|build|ci)\/(.*)$/,
  // Map c√°c nh√≥m b·∫Øt ƒë∆∞·ª£c t·ª´ regex v√†o c√°c tr∆∞·ªùng c·ªßa commit object
  headerCorrespondence: [
    "issue",
    "authorBranchPrefix",
    "type",
    "scope",
    "subject",
  ],
  // B·ªè qua t·∫•t c·∫£ c√°c commit kh√¥ng kh·ªõp v·ªõi headerPattern tr√™n (t·ª©c l√† kh√¥ng ph·∫£i merge PR ho·∫∑c kh√¥ng ƒë√∫ng format nh√°nh)
  // ƒêi·ªÅu n√†y gi√∫p lo·∫°i b·ªè c√°c commit tr·ª±c ti·∫øp (direct commits)
  onHeaderCorrespondence: (commit) => {
    console.log("üîç Analyzing commit header:", commit);
    if (!commit.type) {
      return null; // N·∫øu kh√¥ng t√¨m th·∫•y 'type' t·ª´ t√™n nh√°nh, b·ªè qua commit n√†y
    }
    return commit;
  },
};

const writerOpts = {
  transform: (commit, context) => {
    console.log("üîç Processing commit:", commit);
    console.log("üîó Repository context:", context.repository);

    // const issues = [];

    // if (commit.merge) {
    //   console.log("üìù Found merge commit:", commit.merge);
    //   const prMatch = commit.merge.match(/Merge pull request #(\d+)/);
    //   if (prMatch) {
    //     console.log("‚úÖ Extracted PR from merge:", prMatch[1]);
    //     issues.push(prMatch[1]);
    //   } else {
    //     console.log("‚ùå No PR found in merge commit");
    //   }
    // }

    // if (commit.references && commit.references.length > 0) {
    //   console.log("üìã Found commit references:", commit.references);
    //   commit.references.forEach((reference) => {
    //     if (reference.issue && !issues.includes(reference.issue)) {
    //       console.log("‚úÖ Added PR reference:", reference.issue);
    //       issues.push(reference.issue);
    //     }
    //   });
    // } else {
    //   console.log("üìã No commit references found");
    // }

    // let entry = `* ${commit.subject}`;

    // // Add commit hash link
    // if (commit.hash) {
    //   const shortHash = commit.hash.substring(0, 7);
    //   entry += ` ([${shortHash}](${context.repository}/commit/${commit.hash}))`;
    //   console.log(`üîó Added commit hash link: ${shortHash}`);
    // }

    // // Add PR links
    // if (issues.length > 0) {
    //   const prLinks = issues
    //     .map((issue) => `[#${issue}](${context.repository}/pull/${issue})`)
    //     .join(", ");
    //   entry += ` (${prLinks})`;
    //   console.log(`üîó Added PR links: ${prLinks}`);
    // } else {
    //   console.log("‚ùå No PR links to add");
    // }

    // console.log("üìÑ Final entry:", entry);
    // console.log("---");

    // return entry;

    if (!commit.type) {
      return; // B·ªè qua n·∫øu commit kh√¥ng c√≥ type h·ª£p l·ªá (v√≠ d·ª•: c√°c commit kh√¥ng ph·∫£i merge PR)
    }

    // L·∫•y th√¥ng tin PR t·ª´ references
    const prReference = commit.references.find((ref) => ref.prefix === "#");
    const prNumber = prReference ? prReference.issue : null;

    // L·∫•y 7 k√Ω t·ª± ƒë·∫ßu c·ªßa hash commit ƒë·ªÉ l√†m short hash
    const commitHashShort = commit.hash.substring(0, 7);

    // X√¢y d·ª±ng link commit v√† link PR
    const commitLink = `([${commitHashShort}](/commit/${commit.hash}))`;
    const prLink = prNumber ? `([#${prNumber}](/pull/${prNumber}))` : "";

    // T·∫°o ti√™u ƒë·ªÅ cho Changelog d·ª±a tr√™n type (feat/fix)
    // B·∫°n c√≥ th·ªÉ t√πy ch·ªânh c√°c ti√™u ƒë·ªÅ n√†y

    // S·ª≠ d·ª•ng message ban ƒë·∫ßu c·ªßa merge commit ho·∫∑c ph·∫ßn subject ƒë√£ ƒë∆∞·ª£c parse
    // commit.subject ban ƒë·∫ßu l√† "Merge pull request #115 from Truong167/fix/test"
    // N·∫øu b·∫°n mu·ªën l·∫•y ph·∫ßn 'Fix/test' t·ª´ body: commit.body
    const displayMessage = commit.subject || commit.message;

    // Format d√≤ng changelog mong mu·ªën
    // V√≠ d·ª•: * Merge pull request #115 from Truong167/fix/test ([b5cfa4e](commit-link)) ([#115](pr-link))
    console.log(`log ne * ${displayMessage} ${commitLink} ${prLink}`);
    return `* ${displayMessage} ${commitLink} ${prLink}`;
  },
  groupBy: "type",
  commitGroupsSort: "title",
  commitsSort: ["scope", "subject"],
  noteGroupsSort: "title",
};

module.exports = {
  debug: true,
  branches: [
    "main",
    {
      name: "dev",
      prerelease: "canary",
    },
    {
      name: "feat/dev",
      prerelease: "beta",
    },
  ],
  plugins: [
    [
      "@semantic-release/commit-analyzer",
      {
        parserOpts,
        releaseRules: [
          { type: "feat", scope: "*", release: "minor" },
          { type: "fix", scope: "*", release: "patch" },
          { type: "perf", scope: "*", release: "patch" },
          { type: "refactor", scope: "*", release: "patch" },
          { type: "docs", scope: "*", release: "patch" },
          { type: "revert", scope: "*", release: "patch" },
          { type: "build", scope: "*", release: "patch" },
          { type: "ci", scope: "*", release: "patch" },
          { breaking: true, release: "major" },
        ],
      },
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        parserOpts,
        writerOpts,
      },
    ],
    [
      "@semantic-release/changelog",
      {
        changelogFile: "CHANGELOG.md",
      },
    ],
    [
      "@semantic-release/git",
      {
        assets: ["CHANGELOG.md", "package.json"],
        message: "chore(release): ${nextRelease.version} [skip ci]",
      },
    ],
    [
      "@semantic-release/github",
      {
        releaseBodyTemplate:
          "Please refer to the [CHANGELOG.md](https://github.com/oven-bz/liberty-be/blob/${nextRelease.gitTag}/CHANGELOG.md) for full details on this release.",
        successComment: false,
        failComment: false,
      },
    ],
  ],
};
