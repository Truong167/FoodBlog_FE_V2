// .releaserc.js - Gi·∫£i ph√°p cu·ªëi c√πng: CHANGELOG.md ƒë·∫ßy ƒë·ªß, GitHub Release Body l√† link

const parserOpts = {
  headerPattern:
    /^(feat|fix|build|chore|ci|docs|perf|refactor|revert|style|test)\/([\w-]+):\s(.+)$/,
  headerCorrespondence: ["type", "scope", "subject"],
  noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE"],
  issuePrefixes: ["#"],
};

// H√†m t√πy ch·ªânh ƒë·ªÉ t·∫°o n·ªôi dung cho GitHub Release Body
// H√†m n√†y s·∫Ω ƒê∆Ø·ª¢C G·ªåI b·ªüi plugin @semantic-release/github.
const getGitHubReleaseBody = async (
  { nextRelease: { version, gitTag } },
  context
) => {
  // --- DEBUGGING CHO H√ÄM N√ÄY ---
  console.error("--- DEBUG: getGitHubReleaseBody STARTED ---");
  console.error("nextRelease.version:", version);
  console.error("nextRelease.gitTag:", gitTag);
  console.error(
    "Context for getGitHubReleaseBody:",
    JSON.stringify(context, null, 2)
  );

  const [owner, repo] = (
    process.env.GITHUB_REPOSITORY ||
    context.repository ||
    "Truong167/FoodBlog_FE_V2"
  ) // Fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c repo t·ª´ env/context
    .split("/");
  console.error("Determined Owner:", owner, "Repo:", repo);

  // T·∫°o URL ƒë·∫øn CHANGELOG.md tr√™n GitHub
  const changelogUrl = `https://github.com/${owner}/${repo}/blob/${gitTag}/CHANGELOG.md`;
  console.error("Generated CHANGELOG URL for Release Body:", changelogUrl);

  let releaseBody = `Please refer to the [CHANGELOG.md](${changelogUrl}) for full details on this release.`;

  if (gitTag.includes("-beta") || gitTag.includes("-dev")) {
    releaseBody =
      `### üß™ Prerelease v${version}\n\n` +
      releaseBody +
      "\n\n**This is a pre-release version and may contain bugs.**";
  } else {
    releaseBody = `### ‚ú® Release v${version}\n\n` + releaseBody;
  }
  console.error("Final GitHub Release Body:", releaseBody);
  console.error("--- DEBUG: getGitHubReleaseBody ENDED ---");

  return releaseBody;
};

module.exports = {
  debug: true, // GI·ªÆ ƒê·ªÇ DEBUG
  branches: [
    "main",
    {
      name: "feat/dev",
      prerelease: "dev",
    },
  ],
  plugins: [
    [
      "@semantic-release/commit-analyzer",
      {
        parserOpts,
        releaseRules: [
          { type: "feat", scope: "*", release: "minor" },
          { type: "feat", release: "minor" },
          { type: "fix", scope: "*", release: "patch" },
          { type: "fix", release: "patch" },
          { type: "perf", release: "patch" },
          { type: "refactor", release: "patch" },
          { type: "docs", release: "patch" },
          { type: "revert", release: "patch" },
          { type: "build", release: "patch" },
          { type: "ci", release: "patch" },
          { breaking: true, release: "major" },
        ],
      },
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        parserOpts,
        // *** ƒê√ÇY L√Ä ƒêI·ªÇM QUAN TR·ªåNG: KH√îNG ƒê·ªäNH NGHƒ®A `writerOpts` hay `footerPartial` ·ªü ƒë√¢y.
        // ƒêi·ªÅu n√†y s·∫Ω khi·∫øn plugin n√†y t·∫°o ra CHANGELOG.md ƒê·∫¶Y ƒê·ª¶ V·ªöI DANH S√ÅCH COMMIT
        // theo ƒë·ªãnh d·∫°ng c·ªßa preset.
        preset: "conventionalcommits", // S·ª¨ D·ª§NG PRESET ƒê·ªÇ C√ì CHANGELOG ƒê·∫¶Y ƒê·ª¶
      },
    ],
    [
      "@semantic-release/changelog",
      {
        changelogFile: "CHANGELOG.md",
      },
    ],
    [
      "@semantic-release/npm",
      {
        npmPublish: false,
      },
    ],
    [
      "@semantic-release/git",
      {
        assets: ["CHANGELOG.md", "package.json"],
        // QUAN TR·ªåNG: KH√îNG s·ª≠ d·ª•ng ${nextRelease.notes} ·ªü ƒë√¢y.
        // V√¨ nextRelease.notes s·∫Ω ch·ª©a n·ªôi dung CHANGELOG ƒë·∫ßy ƒë·ªß.
        // Git commit message ch·ªâ n√™n ng·∫Øn g·ªçn.
        message: "chore(release): ${nextRelease.version} [skip ci]",
      },
    ],
    [
      "@semantic-release/github",
      {
        // *** ƒê√ÇY L√Ä ƒêI·ªÇM QUAN TR·ªåNG: S·ª≠ d·ª•ng h√†m t√πy ch·ªânh cho GitHub Release Body ***

        releaseBodyTemplate: getGitHubReleaseBody,

      },
    ],
  ],
};
