name: Create GitHub Release on Merge

on:
  pull_request:
    types: [closed]
    branches:
      - dev # Nhánh mà PR Release sẽ được merge vào

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Cần quyền để tạo release và tag
      pull-requests: write # Có thể không cần nếu chỉ tạo release, nhưng an toàn để có
      # id-token: write # Thêm nếu bạn dùng OIDC, không thì không cần

    if: github.event.pull_request.merged && contains(github.event.pull_request.title, 'Release v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Khi chạy trên sự kiện pull_request, HEAD commit sẽ là merge commit của PR.
          # fetch-depth: 0 vẫn cần thiết nếu semantic-release cần toàn bộ lịch sử commit.
          fetch-depth: 0

      - name: Setup Node & Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.4

      - name: Install dependencies
        run: bun install

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run semantic-release (to create release tag and get release info)
        id: semantic_release_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- START: semantic-release execution for release creation ---"
          set -o pipefail
          # Quan trọng: Khi chạy trên pull_request.closed, HEAD của branch vẫn là trước khi merge.
          # semantic-release cần chạy trên commit sau khi merge.
          # Chúng ta cần đảm bảo code đã được merge.
          # Để làm điều này, chúng ta có thể checkout branch đích (dev) sau khi PR đã merge.
          # Tuy nhiên, nếu semantic-release dựa vào git history để xác định version,
          # nó sẽ cần branch đã được merge. github.event.pull_request.head.ref
          # Hoặc tốt hơn, hãy checkout commit của pull_request.merge_commit_sha.
          # NHƯNG, nếu semantic-release TẠO ra release, nó cần chạy trên branch đã merge.
          # Để an toàn, chúng ta có thể chuyển sang git checkout origin/${{ github.base_ref }}
          # hoặc dựa vào hành vi mặc định của checkout action khi chạy trên pull_request.closed.
          # Với pull_request.types: [closed], github.sha sẽ là HEAD của branch đích SAU KHI merge.
          # Vì vậy, actions/checkout@v4 nên tự động xử lý đúng.
          npx semantic-release --debug 2>&1 | tee semantic_release_raw_output.txt || {
            echo "semantic-release command failed with exit code $?."
            cat semantic_release_raw_output.txt
            exit 1
          }
          echo "--- END: semantic-release execution for release creation ---"

          # Trích xuất phiên bản và release notes tương tự như workflow PR
          NEW_VERSION_FROM_CHANGELOG=""
          NEW_VERSION_FROM_CHANGELOG=$(
            grep -E '^##\s(v)?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?\s+\([0-9]{4}-[0-9]{2}-[0-9]{2}\)' CHANGELOG.md |
            head -n 1 |
            sed -E 's/^##\s(v)?([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?)\s+\([0-9]{4}-[0-9]{2}-[0-9]{2}\).*$/\2/'
          )

          RELEASE_NOTES_BODY=$(
              sed -n '/^## '"$NEW_VERSION_FROM_CHANGELOG"'\s/,/^##/P' CHANGELOG.md |
              grep -v '^## ' |
              sed 's/^\s*//;s/\s*$//' |
              awk 'NF {found=1} {if ($0 !~ /^\s*$/) print}'
          )
          if [ -z "$RELEASE_NOTES_BODY" ]; then
              RELEASE_NOTES_BODY="No detailed release notes available."
          fi

          echo "new_version=$NEW_VERSION_FROM_CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "release_notes_pr_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$RELEASE_NOTES_BODY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        if: steps.semantic_release_run.outputs.new_version != 'none' # Chỉ tạo release nếu có phiên bản mới
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.semantic_release_run.outputs.new_version }}
          release_name: Release v${{ steps.semantic_release_run.outputs.new_version }}
          body: |
            ${{ steps.semantic_release_run.outputs.release_notes_pr_body }}

            Please refer to the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v${{ steps.semantic_release_run.outputs.new_version }}/CHANGELOG.md) for full details on this release.
          draft: false
          prerelease: ${{ contains(github.ref, 'dev') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
